{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Josh\\\\Documents\\\\Computer Science\\\\HACKATHON\\\\bluehacks\\\\src\\\\components\\\\Map.jsx\",\n  _s = $RefreshSig$();\n// src/components/Map.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport { GoogleMap, Marker, useLoadScript, Autocomplete } from '@react-google-maps/api';\nimport axios from 'axios';\nimport Popup from './Popup';\nimport './Map.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Map = ({\n  isCallForHelpMode\n}) => {\n  _s();\n  var _pins, _pins2;\n  const [markerPosition, setMarkerPosition] = useState(null);\n  const [showPopup, setShowPopup] = useState(false);\n  const [isLocationConfirmed, setIsLocationConfirmed] = useState(false);\n  const [pins, setPins] = useState([]); // Array to store all pins\n  const [selectedPin, setSelectedPin] = useState(null); // Currently selected pin\n  const [address, setAddress] = useState(''); // Address for the search bar\n  const autocompleteRef = useRef(null);\n  const {\n    isLoaded\n  } = useLoadScript({\n    googleMapsApiKey: 'AIzaSyD1JWD2LMUTfBiF6Gk5jpuMxMpE7_q9EE8',\n    // Replace with your API key\n    libraries: ['places'] // Enable Places API\n  });\n\n  // Get the user's current location\n  useEffect(() => {\n    if (isCallForHelpMode && navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        const userLocation = {\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        };\n        setMarkerPosition(userLocation);\n        fetchAddress(userLocation); // Fetch address for the current location\n      }, error => {\n        console.error('Error getting user location:', error);\n      });\n    }\n  }, [isCallForHelpMode]);\n\n  // Fetch address from coordinates using Geocoding API\n  const fetchAddress = async position => {\n    try {\n      const response = await axios.get(`https://maps.googleapis.com/maps/api/geocode/json?latlng=${position.lat},${position.lng}&key=AIzaSyD1JWD2LMUTfBiF6Gk5jpuMxMpE7_q9EE8`);\n      if (response.data.results[0]) {\n        setAddress(response.data.results[0].formatted_address);\n      }\n    } catch (error) {\n      console.error('Error fetching address:', error);\n    }\n  };\n\n  // Handle map clicks (only if location is not confirmed)\n  const handleMapClick = event => {\n    if (isCallForHelpMode && !isLocationConfirmed) {\n      const newPosition = {\n        lat: event.latLng.lat(),\n        lng: event.latLng.lng()\n      };\n      setMarkerPosition(newPosition);\n      fetchAddress(newPosition); // Fetch address for the new position\n    }\n  };\n\n  // Handle address search\n  const onPlaceChanged = () => {\n    if (autocompleteRef.current) {\n      const place = autocompleteRef.current.getPlace();\n      if (place.geometry) {\n        const newPosition = {\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng()\n        };\n        setMarkerPosition(newPosition);\n        setAddress(place.formatted_address); // Update address from the search result\n      }\n    }\n  };\n\n  // Handle disaster selection\n  const handleSelectDisaster = disasterType => {\n    if (markerPosition) {\n      const newPin = {\n        id: Date.now(),\n        // Unique ID for the pin\n        position: markerPosition,\n        disasterType: disasterType,\n        address: address // Store the address with the pin\n      };\n      setPins(prevPins => [...prevPins, newPin]); // Add the new pin to the array\n      setShowPopup(false); // Close the disaster selection popup\n      setIsLocationConfirmed(true); // Show confirmation popup\n      setMarkerPosition(null); // Reset the marker position\n      setAddress(''); // Clear the address\n    }\n  };\n\n  // Handle pin deletion\n  const handleDeletePin = pinId => {\n    setPins(prevPins => prevPins.filter(pin => pin.id !== pinId));\n    setSelectedPin(null); // Clear the selected pin\n  };\n\n  // Handle pin selection\n  const handlePinClick = pin => {\n    setSelectedPin(pin);\n  };\n  if (!isLoaded) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 110,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GoogleMap, {\n      zoom: 12,\n      center: markerPosition || {\n        lat: 14,\n        lng: 482\n      } // Default center\n      ,\n      mapContainerStyle: {\n        width: '100%',\n        height: '100vh'\n      },\n      onClick: isCallForHelpMode && !isLocationConfirmed ? handleMapClick : undefined // Only allow clicks in \"Call for Help\" mode\n      ,\n      children: [pins.map(pin => /*#__PURE__*/_jsxDEV(Marker, {\n        position: pin.position,\n        onClick: () => handlePinClick(pin) // Handle pin click\n      }, pin.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 11\n      }, this)), isCallForHelpMode && markerPosition && !isLocationConfirmed && /*#__PURE__*/_jsxDEV(Marker, {\n        position: markerPosition,\n        draggable: true,\n        onDragEnd: event => {\n          const newPosition = {\n            lat: event.latLng.lat(),\n            lng: event.latLng.lng()\n          };\n          setMarkerPosition(newPosition);\n          fetchAddress(newPosition); // Fetch address for the new position\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), isCallForHelpMode && !isLocationConfirmed && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search\",\n      children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n        onLoad: autocomplete => autocompleteRef.current = autocomplete,\n        onPlaceChanged: onPlaceChanged,\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input\",\n          type: \"text\",\n          placeholder: \"Search for an address\",\n          value: address // Bind the address to the input\n          ,\n          onChange: e => setAddress(e.target.value) // Allow manual input\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }, this), isCallForHelpMode && !isLocationConfirmed && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"confirm\",\n      onClick: () => setShowPopup(true),\n      children: \"Confirm Location\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }, this), showPopup && /*#__PURE__*/_jsxDEV(Popup, {\n      onSelectDisaster: handleSelectDisaster,\n      onClose: () => setShowPopup(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }, this), isLocationConfirmed && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"confirmation-popup\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"You asked for help at \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: (_pins = pins[pins.length - 1]) === null || _pins === void 0 ? void 0 : _pins.address\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 35\n        }, this), \" with\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: (_pins2 = pins[pins.length - 1]) === null || _pins2 === void 0 ? void 0 : _pins2.disasterType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 13\n        }, this), \". Are you sure?\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          var _pins3;\n          return handleDeletePin((_pins3 = pins[pins.length - 1]) === null || _pins3 === void 0 ? void 0 : _pins3.id);\n        },\n        children: \"Delete Pin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setIsLocationConfirmed(false),\n        children: \"Okay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 9\n    }, this), selectedPin && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pin-details\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Help asked at \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: selectedPin.address\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 27\n        }, this), \" with\", \" \", /*#__PURE__*/_jsxDEV(\"strong\", {\n          children: selectedPin.disasterType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }, this), \".\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => handleDeletePin(selectedPin.id),\n        children: \"Delete Pin\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSelectedPin(null),\n        children: \"Okay\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(Map, \"RQ6ARixq2ydTllcbbs+6NsJQMp0=\", false, function () {\n  return [useLoadScript];\n});\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","useRef","GoogleMap","Marker","useLoadScript","Autocomplete","axios","Popup","jsxDEV","_jsxDEV","Fragment","_Fragment","Map","isCallForHelpMode","_s","_pins","_pins2","markerPosition","setMarkerPosition","showPopup","setShowPopup","isLocationConfirmed","setIsLocationConfirmed","pins","setPins","selectedPin","setSelectedPin","address","setAddress","autocompleteRef","isLoaded","googleMapsApiKey","libraries","navigator","geolocation","getCurrentPosition","position","userLocation","lat","coords","latitude","lng","longitude","fetchAddress","error","console","response","get","data","results","formatted_address","handleMapClick","event","newPosition","latLng","onPlaceChanged","current","place","getPlace","geometry","location","handleSelectDisaster","disasterType","newPin","id","Date","now","prevPins","handleDeletePin","pinId","filter","pin","handlePinClick","children","fileName","_jsxFileName","lineNumber","columnNumber","zoom","center","mapContainerStyle","width","height","onClick","undefined","map","draggable","onDragEnd","className","onLoad","autocomplete","type","placeholder","value","onChange","e","target","onSelectDisaster","onClose","length","_pins3","_c","$RefreshReg$"],"sources":["C:/Users/Josh/Documents/Computer Science/HACKATHON/bluehacks/src/components/Map.jsx"],"sourcesContent":["// src/components/Map.js\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { GoogleMap, Marker, useLoadScript, Autocomplete } from '@react-google-maps/api';\r\nimport axios from 'axios';\r\nimport Popup from './Popup';\r\nimport './Map.css';\r\n\r\nconst Map = ({ isCallForHelpMode }) => {\r\n  const [markerPosition, setMarkerPosition] = useState(null);\r\n  const [showPopup, setShowPopup] = useState(false);\r\n  const [isLocationConfirmed, setIsLocationConfirmed] = useState(false);\r\n  const [pins, setPins] = useState([]); // Array to store all pins\r\n  const [selectedPin, setSelectedPin] = useState(null); // Currently selected pin\r\n  const [address, setAddress] = useState(''); // Address for the search bar\r\n  const autocompleteRef = useRef(null);\r\n\r\n  const { isLoaded } = useLoadScript({\r\n    googleMapsApiKey: 'AIzaSyD1JWD2LMUTfBiF6Gk5jpuMxMpE7_q9EE8', // Replace with your API key\r\n    libraries: ['places'], // Enable Places API\r\n  });\r\n\r\n  // Get the user's current location\r\n  useEffect(() => {\r\n    if (isCallForHelpMode && navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          const userLocation = {\r\n            lat: position.coords.latitude,\r\n            lng: position.coords.longitude,\r\n          };\r\n          setMarkerPosition(userLocation);\r\n          fetchAddress(userLocation); // Fetch address for the current location\r\n        },\r\n        (error) => {\r\n          console.error('Error getting user location:', error);\r\n        }\r\n      );\r\n    }\r\n  }, [isCallForHelpMode]);\r\n\r\n  // Fetch address from coordinates using Geocoding API\r\n  const fetchAddress = async (position) => {\r\n    try {\r\n      const response = await axios.get(\r\n        `https://maps.googleapis.com/maps/api/geocode/json?latlng=${position.lat},${position.lng}&key=AIzaSyD1JWD2LMUTfBiF6Gk5jpuMxMpE7_q9EE8`\r\n      );\r\n      if (response.data.results[0]) {\r\n        setAddress(response.data.results[0].formatted_address);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error fetching address:', error);\r\n    }\r\n  };\r\n\r\n  // Handle map clicks (only if location is not confirmed)\r\n  const handleMapClick = (event) => {\r\n    if (isCallForHelpMode && !isLocationConfirmed) {\r\n      const newPosition = {\r\n        lat: event.latLng.lat(),\r\n        lng: event.latLng.lng(),\r\n      };\r\n      setMarkerPosition(newPosition);\r\n      fetchAddress(newPosition); // Fetch address for the new position\r\n    }\r\n  };\r\n\r\n  // Handle address search\r\n  const onPlaceChanged = () => {\r\n    if (autocompleteRef.current) {\r\n      const place = autocompleteRef.current.getPlace();\r\n      if (place.geometry) {\r\n        const newPosition = {\r\n          lat: place.geometry.location.lat(),\r\n          lng: place.geometry.location.lng(),\r\n        };\r\n        setMarkerPosition(newPosition);\r\n        setAddress(place.formatted_address); // Update address from the search result\r\n      }\r\n    }\r\n  };\r\n\r\n  // Handle disaster selection\r\n  const handleSelectDisaster = (disasterType) => {\r\n    if (markerPosition) {\r\n      const newPin = {\r\n        id: Date.now(), // Unique ID for the pin\r\n        position: markerPosition,\r\n        disasterType: disasterType,\r\n        address: address, // Store the address with the pin\r\n      };\r\n      setPins((prevPins) => [...prevPins, newPin]); // Add the new pin to the array\r\n      setShowPopup(false); // Close the disaster selection popup\r\n      setIsLocationConfirmed(true); // Show confirmation popup\r\n      setMarkerPosition(null); // Reset the marker position\r\n      setAddress(''); // Clear the address\r\n    }\r\n  };\r\n\r\n  // Handle pin deletion\r\n  const handleDeletePin = (pinId) => {\r\n    setPins((prevPins) => prevPins.filter((pin) => pin.id !== pinId));\r\n    setSelectedPin(null); // Clear the selected pin\r\n  };\r\n\r\n  // Handle pin selection\r\n  const handlePinClick = (pin) => {\r\n    setSelectedPin(pin);\r\n  };\r\n\r\n  if (!isLoaded) return <div>Loading...</div>;\r\n\r\n  return (\r\n    <>\r\n      <GoogleMap\r\n        zoom={12}\r\n        center={markerPosition || { lat: 14, lng: 482 }} // Default center\r\n        mapContainerStyle={{ width: '100%', height: '100vh' }}\r\n        onClick={isCallForHelpMode && !isLocationConfirmed ? handleMapClick : undefined} // Only allow clicks in \"Call for Help\" mode\r\n      >\r\n        {/* Render all pins */}\r\n        {pins.map((pin) => (\r\n          <Marker\r\n            key={pin.id}\r\n            position={pin.position}\r\n            onClick={() => handlePinClick(pin)} // Handle pin click\r\n          />\r\n        ))}\r\n\r\n        {/* Render the current marker (if not confirmed yet) */}\r\n        {isCallForHelpMode && markerPosition && !isLocationConfirmed && (\r\n          <Marker\r\n            position={markerPosition}\r\n            draggable={true}\r\n            onDragEnd={(event) => {\r\n              const newPosition = {\r\n                lat: event.latLng.lat(),\r\n                lng: event.latLng.lng(),\r\n              };\r\n              setMarkerPosition(newPosition);\r\n              fetchAddress(newPosition); // Fetch address for the new position\r\n            }}\r\n          />\r\n        )}\r\n      </GoogleMap>\r\n\r\n      {/* Search Bar */}\r\n      {isCallForHelpMode && !isLocationConfirmed && (\r\n        <div className=\"search\">\r\n          <Autocomplete\r\n            onLoad={(autocomplete) => (autocompleteRef.current = autocomplete)}\r\n            onPlaceChanged={onPlaceChanged}\r\n          >\r\n            <input\r\n              className=\"input\"\r\n              type=\"text\"\r\n              placeholder=\"Search for an address\"\r\n              value={address} // Bind the address to the input\r\n              onChange={(e) => setAddress(e.target.value)} // Allow manual input\r\n            />\r\n          </Autocomplete>\r\n        </div>\r\n      )}\r\n\r\n      {/* Confirm Location Button */}\r\n      {isCallForHelpMode && !isLocationConfirmed && (\r\n        <button className=\"confirm\" onClick={() => setShowPopup(true)}>\r\n          Confirm Location\r\n        </button>\r\n      )}\r\n\r\n      {/* Popup for disaster selection */}\r\n      {showPopup && (\r\n        <Popup\r\n          onSelectDisaster={handleSelectDisaster}\r\n          onClose={() => setShowPopup(false)}\r\n        />\r\n      )}\r\n\r\n      {/* Confirmation message after disaster selection */}\r\n      {isLocationConfirmed && (\r\n        <div className=\"confirmation-popup\">\r\n          <p>\r\n            You asked for help at <strong>{pins[pins.length - 1]?.address}</strong> with{\" \"}\r\n            <strong>{pins[pins.length - 1]?.disasterType}</strong>. Are you sure?\r\n          </p>\r\n          <button onClick={() => handleDeletePin(pins[pins.length - 1]?.id)}>Delete Pin</button>\r\n          <button onClick={() => setIsLocationConfirmed(false)}>Okay</button>\r\n        </div>\r\n      )}\r\n\r\n      {/* Pin details when a pin is selected */}\r\n      {selectedPin && (\r\n        <div className=\"pin-details\">\r\n          <p>\r\n            Help asked at <strong>{selectedPin.address}</strong> with{\" \"}\r\n            <strong>{selectedPin.disasterType}</strong>.\r\n          </p>\r\n          <button onClick={() => handleDeletePin(selectedPin.id)}>Delete Pin</button>\r\n          <button onClick={() => setSelectedPin(null)}>Okay</button>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Map;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}