{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Josh\\\\Documents\\\\Computer Science\\\\HACKATHON\\\\bluehacks\\\\src\\\\components\\\\Map.jsx\",\n  _s = $RefreshSig$();\n// src/components/Map.js\nimport React, { useState, useEffect, useRef } from 'react';\nimport { GoogleMap, Marker, useLoadScript, Autocomplete } from '@react-google-maps/api';\nimport Popup from './Popup';\nimport './Map.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Map = ({\n  isCallForHelpMode\n}) => {\n  _s();\n  const [markerPosition, setMarkerPosition] = useState(null);\n  const [showPopup, setShowPopup] = useState(false);\n  const [isLocationConfirmed, setIsLocationConfirmed] = useState(false);\n  const autocompleteRef = useRef(null);\n  const {\n    isLoaded\n  } = useLoadScript({\n    googleMapsApiKey: 'AIzaSyD1JWD2LMUTfBiF6Gk5jpuMxMpE7_q9EE8',\n    // Replace with your API key\n    libraries: ['places'] // Enable Places API\n  });\n\n  // Get the user's current location\n  useEffect(() => {\n    if (isCallForHelpMode && navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        setMarkerPosition({\n          lat: position.coords.latitude,\n          lng: position.coords.longitude\n        });\n      }, error => {\n        console.error('Error getting user location:', error);\n      });\n    }\n  }, [isCallForHelpMode]);\n\n  // Handle map clicks (only if location is not confirmed)\n  const handleMapClick = event => {\n    if (isCallForHelpMode && !isLocationConfirmed) {\n      setMarkerPosition({\n        lat: event.latLng.lat(),\n        lng: event.latLng.lng()\n      });\n    }\n  };\n\n  // Handle address search\n  const onPlaceChanged = () => {\n    if (autocompleteRef.current) {\n      const place = autocompleteRef.current.getPlace();\n      if (place.geometry) {\n        setMarkerPosition({\n          lat: place.geometry.location.lat(),\n          lng: place.geometry.location.lng()\n        });\n      }\n    }\n  };\n\n  // Handle disaster selection\n  const handleSelectDisaster = disasterType => {\n    console.log(`User selected: ${disasterType} at`, markerPosition);\n    // Send this data to the backend\n    setIsLocationConfirmed(true); // Lock the pin\n    setShowPopup(false); // Close popup\n  };\n  if (!isLoaded) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 25\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GoogleMap, {\n      zoom: 12,\n      center: markerPosition || {\n        lat: 14,\n        lng: 482\n      } // Default to San Francisco\n      ,\n      mapContainerStyle: {\n        width: '100%',\n        height: '100vh'\n      },\n      onClick: handleMapClick,\n      children: isCallForHelpMode && markerPosition && /*#__PURE__*/_jsxDEV(Marker, {\n        position: markerPosition,\n        draggable: !isLocationConfirmed // Disable dragging if location is confirmed\n        ,\n        onDragEnd: event => setMarkerPosition({\n          lat: event.latLng.lat(),\n          lng: event.latLng.lng()\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), isCallForHelpMode && !isLocationConfirmed && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"search\",\n      children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n        onLoad: autocomplete => autocompleteRef.current = autocomplete,\n        onPlaceChanged: onPlaceChanged,\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"input\",\n          type: \"text\",\n          placeholder: \"Search for an address\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 11\n    }, this), isCallForHelpMode && !isLocationConfirmed && /*#__PURE__*/_jsxDEV(\"button\", {\n      class: \"confirm-button\",\n      onClick: () => setShowPopup(true),\n      children: \"Confirm Location\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }, this), showPopup && /*#__PURE__*/_jsxDEV(Popup, {\n      onSelectDisaster: handleSelectDisaster,\n      onClose: () => setShowPopup(false)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(Map, \"2SqgPSQ3Fu+t+JJNIG8ejE6Y8zo=\", false, function () {\n  return [useLoadScript];\n});\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","useRef","GoogleMap","Marker","useLoadScript","Autocomplete","Popup","jsxDEV","_jsxDEV","Fragment","_Fragment","Map","isCallForHelpMode","_s","markerPosition","setMarkerPosition","showPopup","setShowPopup","isLocationConfirmed","setIsLocationConfirmed","autocompleteRef","isLoaded","googleMapsApiKey","libraries","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","lng","longitude","error","console","handleMapClick","event","latLng","onPlaceChanged","current","place","getPlace","geometry","location","handleSelectDisaster","disasterType","log","children","fileName","_jsxFileName","lineNumber","columnNumber","zoom","center","mapContainerStyle","width","height","onClick","draggable","onDragEnd","className","onLoad","autocomplete","type","placeholder","class","onSelectDisaster","onClose","_c","$RefreshReg$"],"sources":["C:/Users/Josh/Documents/Computer Science/HACKATHON/bluehacks/src/components/Map.jsx"],"sourcesContent":["// src/components/Map.js\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { GoogleMap, Marker, useLoadScript, Autocomplete } from '@react-google-maps/api';\r\nimport Popup from './Popup';\r\nimport './Map.css';\r\n\r\nconst Map = ({ isCallForHelpMode }) => {\r\n  const [markerPosition, setMarkerPosition] = useState(null);\r\n  const [showPopup, setShowPopup] = useState(false);\r\n  const [isLocationConfirmed, setIsLocationConfirmed] = useState(false);\r\n  const autocompleteRef = useRef(null);\r\n\r\n  const { isLoaded } = useLoadScript({\r\n    googleMapsApiKey: 'AIzaSyD1JWD2LMUTfBiF6Gk5jpuMxMpE7_q9EE8', // Replace with your API key\r\n    libraries: ['places'], // Enable Places API\r\n  });\r\n\r\n  // Get the user's current location\r\n  useEffect(() => {\r\n    if (isCallForHelpMode && navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          setMarkerPosition({\r\n            lat: position.coords.latitude,\r\n            lng: position.coords.longitude,\r\n          });\r\n        },\r\n        (error) => {\r\n          console.error('Error getting user location:', error);\r\n        }\r\n      );\r\n    }\r\n  }, [isCallForHelpMode]);\r\n\r\n  // Handle map clicks (only if location is not confirmed)\r\n  const handleMapClick = (event) => {\r\n    if (isCallForHelpMode && !isLocationConfirmed) {\r\n      setMarkerPosition({\r\n        lat: event.latLng.lat(),\r\n        lng: event.latLng.lng(),\r\n      });\r\n    }\r\n  };\r\n\r\n  // Handle address search\r\n  const onPlaceChanged = () => {\r\n    if (autocompleteRef.current) {\r\n      const place = autocompleteRef.current.getPlace();\r\n      if (place.geometry) {\r\n        setMarkerPosition({\r\n          lat: place.geometry.location.lat(),\r\n          lng: place.geometry.location.lng(),\r\n        });\r\n      }\r\n    }\r\n  };\r\n\r\n  // Handle disaster selection\r\n  const handleSelectDisaster = (disasterType) => {\r\n    console.log(`User selected: ${disasterType} at`, markerPosition);\r\n    // Send this data to the backend\r\n    setIsLocationConfirmed(true); // Lock the pin\r\n    setShowPopup(false); // Close popup\r\n  };\r\n\r\n  if (!isLoaded) return <div>Loading...</div>;\r\n\r\n  return (\r\n    <>\r\n      <GoogleMap\r\n        zoom={12}\r\n        center={markerPosition || { lat: 14, lng: 482}} // Default to San Francisco\r\n        mapContainerStyle={{ width: '100%', height: '100vh' }}\r\n        onClick={handleMapClick}\r\n      >\r\n        {isCallForHelpMode && markerPosition && (\r\n          <Marker\r\n            position={markerPosition}\r\n            draggable={!isLocationConfirmed} // Disable dragging if location is confirmed\r\n            onDragEnd={(event) =>\r\n              setMarkerPosition({\r\n                lat: event.latLng.lat(),\r\n                lng: event.latLng.lng(),\r\n              })\r\n            }\r\n          />\r\n        )}\r\n      </GoogleMap>\r\n\r\n      {/* Search Bar */}\r\n        {isCallForHelpMode && !isLocationConfirmed && (\r\n          <div className=\"search\">\r\n            <Autocomplete\r\n              onLoad={(autocomplete) => (autocompleteRef.current = autocomplete)}\r\n              onPlaceChanged={onPlaceChanged}\r\n            >\r\n              <input\r\n                className=\"input\"\r\n                type=\"text\"\r\n                placeholder=\"Search for an address\"\r\n              />\r\n            </Autocomplete>\r\n          </div>\r\n        )}\r\n\r\n      {/* Confirm Location Button */}\r\n      {isCallForHelpMode && !isLocationConfirmed && (\r\n        <button class=\"confirm-button\"\r\n          onClick={() => setShowPopup(true)}\r\n        >\r\n          Confirm Location\r\n        </button>\r\n      )}\r\n\r\n      {/* Popup */}\r\n      {showPopup && (\r\n        <Popup\r\n          onSelectDisaster={handleSelectDisaster}\r\n          onClose={() => setShowPopup(false)}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Map;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}